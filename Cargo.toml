[package]
name = "realworld-axum-sqlx"
version = "0.1.0"
edition = "2021"

[dependencies]
dotenv = { version = "0.15" }

# A lightweight logging facade for Rust
log = { version = "0.4.17" }

# A web application framework that focuses on ergonomics and modularity.
axum = { version = "0.8", features = ["tower-log"] }

# Extra utilities for axum.
axum-extra = {version = "0.11.0", features = ["typed-header"]}

# Generates better error messages.
axum-macros = "0.4.2"

# A logging implementation for `log` which is configured via an environment variable.
env_logger = { version = "0.10.0" }

# A generic serialization/deserialization framework
serde = { version = "1.0", features = ["derive"] }

# A JSON serialization file format
serde_json = { version = "1.0" }

# Date and time library for Rust
chrono = { version = "0.4", features = ["serde"] }

# derive(Error)
thiserror = { version = "1.0" }

# Create and decode JWTs in a strongly typed way.
jsonwebtoken = { version = "8.3" }

# Easily hash and verify passwords using bcrypt
bcrypt = { version = "0.14.0" }

# Common validation functions (email, url, length, ...) and trait - to be used with `validator_derive`
validator = { version = "0.15", features = ["derive"] }

# The async SQL toolkit for Rust
sqlx = { version = "^0.8.2", features = ["runtime-tokio-rustls", "postgres", "chrono", "uuid", "migrate",] }

# Tokio is an event-driven, non-blocking I/O platform for writing asynchronous applications. 
tokio = { version = "1", features = ["full"] }

# Type erasure for async trait methods
async-trait = "0.1.83"

# Library for using the Serde serialization framework with data in YAML file format. (This project is no longer maintained.)
serde_yaml = "0.9.33"

# tower crates for HTTP middleware
tower = { version = "0.5.2", features = ["timeout"] }
tower-http = { version = "0.6.2", features = ["trace", "cors"] }

tracing = "0.1"
tracing-subscriber = "0.3"

# Utoipa crate provides autogenerated OpenAPI documentation for Rust REST APIs.
utoipa = { version = "5.3.1", features = ["axum_extras"] }

# This crate implements necessary boilerplate code to serve Swagger UI via web server.
utoipa-swagger-ui = { version = "9.0.0", features = ["axum"] }

# A library to generate and parse UUIDs.
# Compatible version is here: https://github.com/diesel-rs/diesel/blob/master/diesel/Cargo.toml#L26
# uuid = { version = "0.8", features = ["serde", "v4"] }
[dependencies.uuid]
version = "1.3.3"
features = ["serde", "v4"]

